rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read any user document
    match /users/{userId} {
      allow read: if request.auth != null;
      // Users can write their own document
      allow write: if request.auth != null && request.auth.uid == userId;
      // Users can update followers/following arrays for follow/unfollow functionality
      allow update: if request.auth != null && 
        (request.auth.uid == userId || 
         (onlyUpdatingFollowersOrFollowing() && request.auth.uid != userId));
    }
    
    // Helper function to check if only followers/following arrays are being updated
    function onlyUpdatingFollowersOrFollowing() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'following']);
    }
    
    // Posts can be read by anyone, created by owner, updated by anyone (for reactions/comments count)
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         onlyUpdatingReactionsOrComments());
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Helper function to check if only reactions or comments count are being updated
    function onlyUpdatingReactionsOrComments() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(['reactions']) || 
             affectedKeys.hasOnly(['commentsCount']) || 
             affectedKeys.hasOnly(['reactions', 'commentsCount']) ||
             affectedKeys.hasOnly(['isHighlighted']);
    }
    
    // Comments can be read and created by anyone authenticated
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}